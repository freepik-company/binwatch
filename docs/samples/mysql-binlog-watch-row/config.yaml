---
# BinWatch configuration file
# This file is written in YAML format

# Logger configuration
logger:
  # debug, info, warn, error, dpanic, panic, fatal
  level: debug
  # console or json
  encoding: json

# Server name of the binwatch instance. Can be set via environment variable which will be replaced at runtime
# It must have the format <hostname>:<port> or <ip>:<port> to be used in the hashring
server_name: "$HOSTNAME:$PORT"

# Hashring configuration
hashring:

  # Sync worker time in milliseconds to sync the ring nodes when a new node is added or removed from the ring
  sync_worker_time_ms: 5000

  # API port to expose the hashring
  api_port: $PORT

  # For static ring discovery we need to define the server names that are part of the ring
  static_ring_discovery:
    hosts:
    - 127.0.0.1:8080
    - localhost:8081

  # For DNS ring discovery we need to define the domain and the port of the headless service to get
  # the list of server names that are part of the ring
  # dns_ring_discovery:
  #   domain: "dns.example.com"
  #   port: 8080

# Sources configuration
# List of sources to watch for changes in the database binlog
sources:

  # MySQL source configuration
  mysql:
    host: "127.0.0.1"
    port: 3306
    user: "root"
    password: "MiContrasenaSegura"

    # Server ID must be unique across all MySQL servers
    server_id: 100

    # Read timeout in seconds
    read_timeout: 90

    # Heartbeat period in seconds
    heartbeat_period: 60

    # Flavor of the database. MySQL or MariaDB
    flavor: mysql

    # Timeout for syincing the events in milliseconds
    sync_timeout_ms: 200

    # Just listen for events in this database-table pairs
    filter_tables:
      - database: test
        table: test

# Data connectors configuration
# List of connectors to send the data to
connectors:

  routes:
    - events: ["insert", "update"]
      connector: pubsub
      data: |
        {{- printf `{ "index": "test", "id": %v, "data": %s}` .data.id (toJson .data) }}
    - events: ["delete"]
      connector: pubsub
      data: |
        {{- printf `{ "index": "test", "id": %v }` .data.id }}

  # PubSub connector configuration
  pubsub:
    project_id: "test-project"
    topic_id: "test-topic"

  # Webhook connector configuration
  webhook:
    tls_skip_verify: false
    url: "https://webhook.site/d4a60a06-3559-41c1-b26c-f701fcebfe5c"
    method: "POST"
    headers:
      X-BinWatch: "true"