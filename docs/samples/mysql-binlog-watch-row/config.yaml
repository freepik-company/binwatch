---
# BinWatch configuration file
# This file is written in YAML format

# Logger configuration
logger:
  # debug, info, warn, error, dpanic, panic, fatal
  level: debug
  # console or json
  encoding: json

# Server id of the binwatch instance. Can be set via environment variable which will be replaced at runtime
# It must have the format <hostname>:<port> or <ip>:<port> to be used in the hashring
server_id: "$HOSTNAME:$PORT"

# Number of workers to process the events
max_workers: 10

# Flow control configuration to control the memory usage by the event connectors queue
flow_control:
  # Check interval to check the queue size
  check_interval: 100ms
  # List of thresholds to control the sleep time of the workers to avoid memory overflow
  thresholds:
    - queue_size: 1
      sleep_time: 10ms
    - queue_size: 10
      sleep_time: 100ms
    - queue_size: 100
      sleep_time: 1s

# Hashring configuration
hashring:

  # Sync worker time to sync the ring nodes when a new node is added or removed from the ring
  sync_worker_time: 500ms

  # API port to expose the hashring
  api_port: $PORT

  # For static ring discovery we need to define the server names that are part of the ring
  static_ring_discovery:
    hosts:
    - 127.0.0.1:8080
    - localhost:8081

  # For DNS ring discovery we need to define the domain and the port of the headless service to get
  # the list of server names that are part of the ring
  # dns_ring_discovery:
  #   domain: "dns.example.com"
  #   port: 8080

# Sources configuration
# List of sources to watch for changes in the database binlog
sources:

  # MySQL source configuration
  mysql:
    host: "127.0.0.1"
    port: 3306
    user: "root"
    password: "MiContrasenaSegura"

    # Server ID must be unique across all MySQL servers
    server_id: 100

    # Read timeout
    read_timeout: 90s

    # Heartbeat period
    heartbeat_period: 60s

    # Flavor of the database. MySQL or MariaDB
    flavor: mysql

    # Just listen for events in this database-table pairs
    filter_tables:
      - database: test
        table: test

    # Start binlog position if you want to start reading from a specific position of binlog or mysqldump
    # Set file mysqldump if you want to start from a specific position in the mysqldump.
    # NOTE: mysqldump dumps in order of the primary key
    start_position:
      file: mysqldump
      position: 4

    # Mysqldump configuration for sync command. Just can dump an entire database, many databases or many tables for ONE database.
    # If many databases are specefied with tables, the tables will be ignored.
    # Empty dump_config disables the previous mysql dump feature.
    dump_config:
      databases:
        - test
      tables:
        - test
      # Extra options for mysqldump command
      mysqldump_extra_options:
        - "--single-transaction"
      mysqldump_bin_path: "/opt/homebrew/bin/mysqldump"
      # Optional if you want to use a different mysql server for the mysqldump (e.g. for a slave)
      host: 127.0.0.1
      port: 3306
      server_id: 101

# Data connectors configuration
# List of connectors to send the data to
connectors:

  routes:
    - events: ["insert", "update"]
      database: test
      table: test
      connector: pubsub-test-add
      data: |-
        {{ $pepe := printf `{ "index": "test", "id": %v, "data": %s}` .data.id (toJson .data) }}
        {{- $pepe }}
    - events: ["delete"]
      database: test
      table: test
      connector: webhook-test
      data: |
        {{- printf `{ "index": "test", "id": %v }` .data.id }}

  # PubSub connector configuration
  pubsub:
    - name: pubsub-test-add
      project_id: "test-project"
      topic_id: "test-topic"
    - name: pubsub-test-delete
      project_id: "test-project"
      topic_id: "test-topic"

  # Webhook connector configuration
  webhook:
    - name: webhook-test
      tls_skip_verify: false
      url: "https://webhook.site/0bc61d18-e306-44c7-a49c-ac6f6f64eb64"
      method: "POST"
      headers:
        X-BinWatch: "true"